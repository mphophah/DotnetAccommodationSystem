// <auto-generated />
using System;
using AMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AMS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230824073438_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("AMS.Data.Admission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccommodationIntrested")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveInDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveInNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("AMS.Data.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssetTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("AMS.Data.AssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AssetTypes");
                });

            modelBuilder.Entity("AMS.Data.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("AMS.Data.Cleaning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("dateCleaning")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Cleanings");
                });

            modelBuilder.Entity("AMS.Data.Communication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommunicationType")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailReceiver")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailSubject")
                        .HasColumnType("TEXT");

                    b.Property<string>("Process")
                        .HasColumnType("TEXT");

                    b.Property<string>("Respond")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsReceiver")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsSubject")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Communications");
                });

            modelBuilder.Entity("AMS.Data.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccommodationIntrested")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveInDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveInNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupation")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantAccess")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("process")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AMS.Data.CustomerDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("BLOB");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantOrStuff")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CustomerDocuments");
                });

            modelBuilder.Entity("AMS.Data.DocumentM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("BLOB");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("AMS.Data.Electricity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Units")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Electricitys");
                });

            modelBuilder.Entity("AMS.Data.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommunicationType")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailReceiver")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailSubject")
                        .HasColumnType("TEXT");

                    b.Property<string>("Process")
                        .HasColumnType("TEXT");

                    b.Property<string>("Respond")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsReceiver")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsSubject")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("AMS.Data.Emegency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Solved")
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Emegencys");
                });

            modelBuilder.Entity("AMS.Data.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("RentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("isPaid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RentTypeId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("AMS.Data.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoanNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("LoanTerm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoanTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RemainingAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LoanTypeId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("AMS.Data.LoanInstallment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<int>("LoanId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("datePaid")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LoanId");

                    b.ToTable("LoanInstallments");
                });

            modelBuilder.Entity("AMS.Data.LoanType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("IntrestRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LoansTypes");
                });

            modelBuilder.Entity("AMS.Data.Maintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaintenanceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MaintenanceTypeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Maintenances");
                });

            modelBuilder.Entity("AMS.Data.MaintenanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceTypeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceTypes");
                });

            modelBuilder.Entity("AMS.Data.ManageProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RentAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("RentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("available")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RentTypeId");

                    b.ToTable("ManagePropertys");
                });

            modelBuilder.Entity("AMS.Data.MeterBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterBoxNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeterBoxTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeterBoxTypeId");

                    b.HasIndex("PropertyId");

                    b.ToTable("MeterBoxs");
                });

            modelBuilder.Entity("AMS.Data.MeterBoxType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterBoxName")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MeterBoxTypes");
                });

            modelBuilder.Entity("AMS.Data.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParkingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("isAvailable")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParkingTypeId");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("AMS.Data.ParkingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParkingTypeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ParkingTypes");
                });

            modelBuilder.Entity("AMS.Data.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupied")
                        .HasColumnType("TEXT");

                    b.Property<string>("OccupiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParkingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Propertys");
                });

            modelBuilder.Entity("AMS.Data.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyTypeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("AMS.Data.RentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("RentTypeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RentTypes");
                });

            modelBuilder.Entity("AMS.Data.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("StuffId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("isPaid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StuffId");

                    b.ToTable("Salarys");
                });

            modelBuilder.Entity("AMS.Data.Sms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommunicationType")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailReceiver")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailSubject")
                        .HasColumnType("TEXT");

                    b.Property<string>("Process")
                        .HasColumnType("TEXT");

                    b.Property<string>("Respond")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsReceiver")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsSubject")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("AMS.Data.SmsUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Receiver")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sender")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsResoan")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SmsUsages");
                });

            modelBuilder.Entity("AMS.Data.Stuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccommodationIntrested")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("IDNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveInDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoveInNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Occupation")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Salary")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantAccess")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("process")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stuffs");
                });

            modelBuilder.Entity("AMS.Data.Timesheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("StuffId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("isPaid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StuffId");

                    b.ToTable("Timesheets");
                });

            modelBuilder.Entity("AMS.Data.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Accept")
                        .HasColumnType("TEXT");

                    b.Property<string>("CarRegistration")
                        .HasColumnType("TEXT");

                    b.Property<string>("CheckOut")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfirmationCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("IsChecked")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParkingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Resoan")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("AMS.Data.Water", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Waters");
                });

            modelBuilder.Entity("AMS.Models.AssetTypeVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AssetTypeVM");
                });

            modelBuilder.Entity("AMS.Models.CommunicationVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommunicationType")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailReceiver")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailSubject")
                        .HasColumnType("TEXT");

                    b.Property<string>("Process")
                        .HasColumnType("TEXT");

                    b.Property<string>("Respond")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsReceiver")
                        .HasColumnType("TEXT");

                    b.Property<string>("SmsSubject")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CommunicationVM");
                });

            modelBuilder.Entity("AMS.Models.EditElectricityVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Units")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PropertyId");

                    b.ToTable("EditElectricityVM");
                });

            modelBuilder.Entity("AMS.Models.LoanTypeVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("IntrestRate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LoanTypeVM");
                });

            modelBuilder.Entity("AMS.Models.MaintenanceTypeVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaintenanceTypeName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MaintenanceTypeVM");
                });

            modelBuilder.Entity("AMS.Models.MeterBoxTypeVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeterBoxName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MeterBoxTypeVM");
                });

            modelBuilder.Entity("AMS.Models.ParkingTypeVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParkingTypeName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ParkingTypeVM");
                });

            modelBuilder.Entity("AMS.Models.PropertyTypeVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyTypeName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypeVM");
                });

            modelBuilder.Entity("AMS.Models.RentTypeVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("RentTypeName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RentTypeVM");
                });

            modelBuilder.Entity("AMS.Models.WaterVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WaterVM");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AMS.Data.Employee", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateDeleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Firstname")
                        .HasColumnType("TEXT");

                    b.Property<string>("IntrestingKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lastname")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxId")
                        .HasColumnType("TEXT");

                    b.Property<string>("isDeleted")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("AMS.Data.Asset", b =>
                {
                    b.HasOne("AMS.Data.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetType");

                    b.Navigation("Customer");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AMS.Data.Cleaning", b =>
                {
                    b.HasOne("AMS.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AMS.Data.Electricity", b =>
                {
                    b.HasOne("AMS.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AMS.Data.Emegency", b =>
                {
                    b.HasOne("AMS.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AMS.Data.Invoice", b =>
                {
                    b.HasOne("AMS.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.RentType", "RentType")
                        .WithMany()
                        .HasForeignKey("RentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("RentType");
                });

            modelBuilder.Entity("AMS.Data.Loan", b =>
                {
                    b.HasOne("AMS.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.LoanType", "LoanType")
                        .WithMany()
                        .HasForeignKey("LoanTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("LoanType");
                });

            modelBuilder.Entity("AMS.Data.LoanInstallment", b =>
                {
                    b.HasOne("AMS.Data.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("AMS.Data.Maintenance", b =>
                {
                    b.HasOne("AMS.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.MaintenanceType", "MaintenanceType")
                        .WithMany()
                        .HasForeignKey("MaintenanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("MaintenanceType");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AMS.Data.ManageProperty", b =>
                {
                    b.HasOne("AMS.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.RentType", "RentType")
                        .WithMany()
                        .HasForeignKey("RentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Property");

                    b.Navigation("RentType");
                });

            modelBuilder.Entity("AMS.Data.MeterBox", b =>
                {
                    b.HasOne("AMS.Data.MeterBoxType", "MeterBoxType")
                        .WithMany()
                        .HasForeignKey("MeterBoxTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeterBoxType");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AMS.Data.Parking", b =>
                {
                    b.HasOne("AMS.Data.ParkingType", "ParkingType")
                        .WithMany()
                        .HasForeignKey("ParkingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingType");
                });

            modelBuilder.Entity("AMS.Data.Property", b =>
                {
                    b.HasOne("AMS.Data.Parking", "Parking")
                        .WithMany()
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("AMS.Data.Salary", b =>
                {
                    b.HasOne("AMS.Data.Stuff", "Stuff")
                        .WithMany()
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("AMS.Data.Timesheet", b =>
                {
                    b.HasOne("AMS.Data.Stuff", "Stuff")
                        .WithMany()
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("AMS.Data.Visitor", b =>
                {
                    b.HasOne("AMS.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.Parking", "Parking")
                        .WithMany()
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Parking");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("AMS.Models.EditElectricityVM", b =>
                {
                    b.HasOne("AMS.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AMS.Data.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
